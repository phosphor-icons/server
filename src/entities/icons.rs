//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use sea_orm::entity::prelude::*;

use crate::table::TableIcon;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "icons")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Text", unique)]
    pub rid: String,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    #[sea_orm(column_type = "Text")]
    pub status: String,
    #[sea_orm(column_type = "Text")]
    pub category: String,
    pub search_categories: Vec<String>,
    pub tags: Vec<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub notes: Option<String>,
    #[sea_orm(column_type = "Double", nullable)]
    pub released_at: Option<f64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub last_updated_at: Option<f64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub deprecated_at: Option<f64>,
    pub published: bool,
    #[sea_orm(column_type = "Text", nullable)]
    pub alias: Option<String>,
    #[sea_orm(unique)]
    pub code: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::svgs::Entity")]
    Svgs,
}

impl Related<super::svgs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Svgs.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl From<TableIcon> for Model {
    fn from(icon: TableIcon) -> Self {
        Model {
            id: icon.id,
            rid: icon.rid,
            name: icon.name,
            status: icon.status.to_string(),
            category: icon.category.to_string(),
            search_categories: icon
                .search_categories
                .iter()
                .map(|s| s.to_string())
                .collect(),
            tags: icon.tags,
            notes: icon.notes,
            released_at: icon.released_at,
            last_updated_at: icon.last_updated_at,
            deprecated_at: icon.deprecated_at,
            published: icon.published,
            alias: icon.alias,
            code: icon.code,
        }
    }
}
